# Form implementation generated from reading ui file 'admin_menu.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

import base64
from email.mime.text import MIMEText
from PyQt6.QtWidgets import QApplication, QWidget, QTableWidgetItem
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from google.auth.transport.requests import Request
import datetime
import pickle
import os.path
from PyQt6 import QtCore, QtGui, QtWidgets

# Google Calendar ve Gmail API yetkilendirme kapsamları
SCOPES = ['https://www.googleapis.com/auth/gmail.send', 'https://www.googleapis.com/auth/calendar','https://www.googleapis.com/auth/calendar.readonly']
  

        
class Ui_admin_menu_MainWindow(object):
    def setupUi(self, admin_menu_MainWindow):
        self.main_window= admin_menu_MainWindow
        admin_menu_MainWindow.setObjectName("admin_menu_MainWindow")
        admin_menu_MainWindow.resize(618, 550)
        admin_menu_MainWindow.setMinimumSize(QtCore.QSize(618, 550))
        admin_menu_MainWindow.setMaximumSize(QtCore.QSize(618, 550))
        self.centralwidget = QtWidgets.QWidget(parent=admin_menu_MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setEnabled(True)
        self.frame.setMinimumSize(QtCore.QSize(618, 550))
        self.frame.setMaximumSize(QtCore.QSize(618, 550))
        self.frame.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0.489, y1:1, x2:0.494, y2:0, stop:0 rgba(71, 71, 71, 255), stop:1 rgba(255, 255, 255, 255));")
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.werhere_image_label = QtWidgets.QLabel(parent=self.frame)
        self.werhere_image_label.setGeometry(QtCore.QRect(10, 20, 581, 111))
        self.werhere_image_label.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.werhere_image_label.setText("")
        self.werhere_image_label.setPixmap(QtGui.QPixmap("images/werhere_image.png"))
        self.werhere_image_label.setScaledContents(True)
        self.werhere_image_label.setObjectName("werhere_image_label")
        self.admin_menu_tableWidget = QtWidgets.QTableWidget(parent=self.frame)
        self.admin_menu_tableWidget.setGeometry(QtCore.QRect(10, 250, 581, 261))
        self.admin_menu_tableWidget.setBaseSize(QtCore.QSize(0, 0))
        font = QtGui.QFont()
        font.setFamily("Segoe UI 13")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        self.admin_menu_tableWidget.setFont(font)
        self.admin_menu_tableWidget.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.admin_menu_tableWidget.setStyleSheet("font: 10pt \"Segoe UI\" bold;")
        self.admin_menu_tableWidget.setLocale(QtCore.QLocale(QtCore.QLocale.Language.English, QtCore.QLocale.Country.Netherlands))
        self.admin_menu_tableWidget.setObjectName("admin_menu_tableWidget")
        self.admin_menu_tableWidget.setColumnCount(4)
        self.admin_menu_tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.admin_menu_tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.admin_menu_tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.admin_menu_tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.admin_menu_tableWidget.setHorizontalHeaderItem(3, item)
        self.admin_menu_tableWidget.horizontalHeader().setDefaultSectionSize(145)
        self.groupBox = QtWidgets.QGroupBox(parent=self.frame)
        self.groupBox.setGeometry(QtCore.QRect(10, 140, 581, 111))
        self.groupBox.setTitle("")
        self.groupBox.setObjectName("groupBox")
        self.act_check_pushButton = QtWidgets.QPushButton(parent=self.groupBox)
        self.act_check_pushButton.setGeometry(QtCore.QRect(150, 40, 101, 31))
        font = QtGui.QFont()
        font.setBold(True)
        self.act_check_pushButton.setFont(font)
        self.act_check_pushButton.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.act_check_pushButton.setStyleSheet("\n"
"QPushButton:hover{\n"
"   border-radius : 6px;\n"
"    color: rgb(255, 255, 255);\n"
"    background-color:  ;\n"
"    background-color: rgb(218, 30, 60);\n"
"    border: 1px solid rgb(255, 255, 255);\n"
"\n"
"}\n"
"")
        self.act_check_pushButton.setObjectName("act_check_pushButton")
        self.send_mail_pushButton = QtWidgets.QPushButton(parent=self.groupBox)
        self.send_mail_pushButton.setGeometry(QtCore.QRect(20, 40, 101, 31))
        font = QtGui.QFont()
        font.setBold(True)
        self.send_mail_pushButton.setFont(font)
        self.send_mail_pushButton.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.send_mail_pushButton.setStyleSheet("\n"
"QPushButton:hover{\n"
"   border-radius : 6px;\n"
"    color: rgb(255, 255, 255);\n"
"    background-color:  ;\n"
"    background-color: rgb(218, 30, 60);\n"
"    border: 1px solid rgb(255, 255, 255);\n"
"\n"
"}\n"
"")
        self.send_mail_pushButton.setObjectName("send_mail_pushButton")
        self.preference_admin_menu_pushButton_3 = QtWidgets.QPushButton(parent=self.groupBox)
        self.preference_admin_menu_pushButton_3.setGeometry(QtCore.QRect(270, 40, 151, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setBold(True)
        self.preference_admin_menu_pushButton_3.setFont(font)
        self.preference_admin_menu_pushButton_3.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.preference_admin_menu_pushButton_3.setStyleSheet("\n"
"QPushButton:hover{\n"
"   border-radius : 6px;\n"
"    color: rgb(255, 255, 255);\n"
"    background-color:  ;\n"
"    background-color: rgb(218, 30, 60);\n"
"    border: 1px solid rgb(255, 255, 255);\n"
"\n"
"}\n"
"\n"
"")
        self.preference_admin_menu_pushButton_3.setObjectName("preference_admin_menu_pushButton_3")
        self.exit_pushButton_4 = QtWidgets.QPushButton(parent=self.groupBox)
        self.exit_pushButton_4.setGeometry(QtCore.QRect(450, 40, 101, 31))
        font = QtGui.QFont()
        font.setBold(True)
        self.exit_pushButton_4.setFont(font)
        self.exit_pushButton_4.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.exit_pushButton_4.setStyleSheet("\n"
"QPushButton:hover{\n"
"   border-radius : 6px;\n"
"    color: rgb(255, 255, 255);\n"
"    background-color:  ;\n"
"    background-color: rgb(218, 30, 60);\n"
"    border: 1px solid rgb(255, 255, 255);\n"
"\n"
"}\n"
"")
        self.exit_pushButton_4.setObjectName("exit_pushButton_4")
        self.label = QtWidgets.QLabel(parent=self.frame)
        self.label.setGeometry(QtCore.QRect(140, 130, 371, 21))
        self.label.setStyleSheet("background-color: qradialgradient(spread:reflect, cx:0.477, cy:0.568, radius:0.73, fx:0.46, fy:0.575, stop:0.602273 rgba(255, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));")
        self.label.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.frame)
        admin_menu_MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(parent=admin_menu_MainWindow)
        self.statusbar.setObjectName("statusbar")
        admin_menu_MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(admin_menu_MainWindow)
        QtCore.QMetaObject.connectSlotsByName(admin_menu_MainWindow)

        self.events = []

        self.menu_user = None
        self.menu_admin = None


        self.act_check_pushButton.clicked.connect(self.act_check_clicked)
        self.send_mail_pushButton.clicked.connect(self.send_mail_clicked)
        self.preference_admin_menu_pushButton_3.clicked.connect(self.preference_admin_menu_clicked)
        self.exit_pushButton_4.clicked.connect(self.exit_clicked)

    def retranslateUi(self, admin_menu_MainWindow):
        _translate = QtCore.QCoreApplication.translate
        admin_menu_MainWindow.setWindowTitle(_translate("admin_menu_MainWindow", "                                                                                  ADMIN MENU"))
        item = self.admin_menu_tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("admin_menu_MainWindow", "Activity Name"))
        item = self.admin_menu_tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("admin_menu_MainWindow", "Start Time"))
        item = self.admin_menu_tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("admin_menu_MainWindow", "Participant Mail"))
        item = self.admin_menu_tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("admin_menu_MainWindow", "Organizer Mail"))
        self.act_check_pushButton.setText(_translate("admin_menu_MainWindow", "Activity Control"))
        self.send_mail_pushButton.setText(_translate("admin_menu_MainWindow", "Send Mail"))
        self.preference_admin_menu_pushButton_3.setText(_translate("admin_menu_MainWindow", "Preference Admin Menü"))
        self.exit_pushButton_4.setText(_translate("admin_menu_MainWindow", "Exit"))
        self.label.setText(_translate("admin_menu_MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-family:\'__Inter_46a1ea\',\'__Inter_Fallback_46a1ea\',\'system-ui\',\'arial\'; font-size:10pt; font-weight:600; color:#ffffff;\">CRM (Admin Menu Page)</span></p></body></html>"))


    def act_check_clicked(self):
        try:
            # Yetkilendirme
            creds = self.get_credentials()
            service = build('calendar', 'v3', credentials=creds)

            # Bugünün tarihini al
            now = datetime.datetime.utcnow().isoformat() + 'Z'

            # Etkinlikleri al
            events_result = service.events().list(calendarId='primary', timeMin=now, maxResults=10,
                                                singleEvents=True, orderBy='startTime').execute()
            self.events = events_result.get('items', [])

            # Tabloya etkinlikleri ekle
            table = self.admin_menu_tableWidget
            table.setRowCount(0)  # Önceki verileri temizle

            if self.events:
                for event in self.events:
                    start = event['start'].get('dateTime', event['start'].get('date'))
                    if start:
                        formatted_start = datetime.datetime.fromisoformat(start).strftime("%d-%m-%Y %H:%M")
                    else:
                        formatted_start = "Unknown"
                    
                    attendees = event.get('attendees', [])
                    participant_emails = ", ".join([attendee['email'] for attendee in attendees if attendee.get('email')])
                    organizer_email = event['organizer'].get('email', 'Unknown')

                    rowPosition = table.rowCount()
                    table.insertRow(rowPosition)
                    table.setItem(rowPosition, 0, QTableWidgetItem(event.get('summary', 'No Name')))
                    table.setItem(rowPosition, 1, QTableWidgetItem(formatted_start))
                    table.setItem(rowPosition, 2, QTableWidgetItem(participant_emails))
                    table.setItem(rowPosition, 3, QTableWidgetItem(organizer_email))
            else:
                print("No upcoming events found.")
        except Exception as e:
            print(f"An error occurred: {e}")

    def get_credentials(self):
        # Token dosyasını kontrol et
        if os.path.exists('token.pickle'):
            with open('token.pickle', 'rb') as token:
                creds = pickle.load(token)
        else:
            creds = None

        # Yetkilendirme yoksa veya geçersizse yeniden yetkilendirme yap
        if not creds or not creds.valid:
            if creds and creds.expired and creds.refresh_token:
                creds.refresh(Request())
            else:
                print("Yeni yetkilendirme başlatılıyor...")
                flow = InstalledAppFlow.from_client_secrets_file(
                    'credentials.json', SCOPES)
                creds = flow.run_local_server(port=0)
                print("Yeni yetkilendirme tamamlandı.")

            # Yeni yetkilendirme bilgilerini kaydet
            with open('token.pickle', 'wb') as token:
                pickle.dump(creds, token)

        return creds


    def send_mail_clicked(self):
        # Gmail API'siyle yetkilendirme
        creds = self.get_credentials()
        service = build('gmail', 'v1', credentials=creds)

        for event in self.events:
            attendees = [attendee['email'] for attendee in event.get('attendees', []) if attendee.get('email')]
            event_id = event['id']

            for email in attendees:
                try:
                    message = self.create_message("workspacevit4@gmail.com", email, "Invitation", "You are invited!")
                    self.send_message(service, "me", message)
                    print(f"Davet gönderildi: {email}")
                except Exception as e:
                    print(f"E-posta gönderilirken bir hata oluştu: {e}")

    def create_message(self, sender, to, subject, message_text):
        message = MIMEText(message_text)
        message['to'] = to
        message['from'] = sender
        message['subject'] = subject
        raw_message = base64.urlsafe_b64encode(message.as_bytes())
        raw_message = raw_message.decode('utf-8')
        return {'raw': raw_message}

    def send_message(self, service, user_id, message):
        try:
            message = service.users().messages().send(userId=user_id, body=message).execute()
        except Exception as e:
            print("E-posta gonderilirken bir hata oluştu:", e)

    
    def preference_admin_menu_clicked(self):
        from preference_admin_menu import Ui_admin_pref_men_MainWindow
        self.MainWindow= QtWidgets.QMainWindow()
        self.ui =Ui_admin_pref_men_MainWindow()
        self.ui.setupUi(self.MainWindow) 
        self.MainWindow.show()  
        self.main_window.close() 


    def exit_clicked(self):
        from PyQt6.QtWidgets import QApplication, QMainWindow, QPushButton
        QApplication.instance().quit()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    admin_menu_MainWindow = QtWidgets.QMainWindow()
    ui = Ui_admin_menu_MainWindow()
    ui.setupUi(admin_menu_MainWindow)
    admin_menu_MainWindow.show()
    sys.exit(app.exec())
