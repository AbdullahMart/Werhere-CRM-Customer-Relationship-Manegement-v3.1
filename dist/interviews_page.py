# Form implementation generated from reading ui file 'interviews_page.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime
from google.oauth2 import service_account
from PyQt6.QtGui import QFont
from googleapiclient.discovery import build
from PyQt6.QtWidgets import *
from PyQt6 import QtCore, QtGui, QtWidgets
import re
from PyQt6.QtCore import Qt
import os




def connection_hub(credentials, table, worksheet_name):
        # Authentication information for accessing the Google Sheets API
        scope = ['https://spreadsheets.google.com/feeds',
                'https://www.googleapis.com/auth/drive',
                'https://www.googleapis.com/auth/calendar.readonly']
        creds = ServiceAccountCredentials.from_json_keyfile_name(credentials, scope)
        client = gspread.authorize(creds)  # Sign in with authentication credentials
        worksheet = client.open(table).worksheet(worksheet_name)  # Access the worksheet
        return worksheet


def remake_it_with_types(a_list):
    n_list = [a_list[0]]
    n_row = []
    for i, row in enumerate(a_list[1:]):
        for j, col in enumerate(row):
            item = str(col).strip()  # with strip() method, we make maintenance to the data.
            if item.isdigit():
                item = int(item)
            elif is_valid_date_format(item):
                item = datetime.strptime(item, "%d.%m.%Y")
                item = item.strftime("%Y/%m/%d")  # Activate it if u want to print datetime data in the format you want.
            n_row.append(item)
        n_list.append(n_row)
        n_row = []
    return n_list


# This function is a datetime checker function. It checks a string value is datetime or not.
def is_valid_date_format(date_str):
    formats = [r'^\d{2}[./-]\d{2}[./-]\d{4}$',
               r'^\d{4}[./-]\d{2}[./-]\d{2}$',
               r'^\d{2}[./-]\d{2}[./-]\d{4} \d{2}[:.]\d{2}[:.]\d{2}$',
               r'^\d{4}[./-]\d{2}[./-]\d{2} \d{2}[:.]\d{2}[:.]\d{2}$',

               # r'^\d{1}[.-/]\d{2}[.-/]\d{4}$',
               # r'^\d{2}[.-/]\d{1}[.-/]\d{4}$',
               # r'^\d{1}[.-/]\d{1}[.-/]\d{4}$',
               #
               # r'^\d{4}[.-/]\d{2}[.-/]\d{1}$',
               # r'^\d{4}[.-/]\d{1}[.-/]\d{2}$',
               # r'^\d{4}[.-/]\d{1}[.-/]\d{1}$',
               #
               # r'^\d{1}[.-/]\d{2}[.-/]\d{4} \d{2}[:.]\d{2}[:.]\d{2}$',
               # r'^\d{2}[.-/]\d{1}[.-/]\d{4} \d{2}[:.]\d{2}[:.]\d{2}$',
               # r'^\d{1}[.-/]\d{1}[.-/]\d{4} \d{2}[:.]\d{2}[:.]\d{2}$',
               #
               # r'^\d{4}[.-/]\d{2}[.-/]\d{1} \d{2}[:.]\d{2}[:.]\d{2}$',
               # r'^\d{4}[.-/]\d{1}[.-/]\d{2} \d{2}[:.]\d{2}[:.]\d{2}$',
               # r'^\d{4}[.-/]\d{1}[.-/]\d{1} \d{2}[:.]\d{2}[:.]\d{2}$',
               ]
    try:
        for i in formats:
            if re.match(i, date_str) is not None:
                return re.match(i, date_str) is not None
    except ValueError:
        return False
    


def write2table(table_widget, a_list):
    table_widget.clearContents()  # Clear table
    table_widget.setColumnCount(len(a_list[0]))  # Add title to table
    table_widget.setHorizontalHeaderLabels(a_list[0])
    table_widget.setRowCount(len(a_list[1:]))  # Fill in the table
    for i, row in enumerate(a_list[1:]):
        for j, col in enumerate(row):
            # with strip() method, we make maintenance to the data.
            # (If it is not made by "remake_it_with_types" function)
            item = QTableWidgetItem(str(col).strip())
            if item.text().isdigit():
                text = item.text()
                item = interviews_page_MainWindow(text)  # An example of a tableWidget class defined at the top of this page
            item.setData(QtCore.Qt.ItemDataRole.UserRole, col)
            table_widget.setItem(i, j, item)
    return True






class Ui_interviews_page_MainWindow(object):
    def setupUi(self, interviews_page_MainWindow):
        self.main_window = interviews_page_MainWindow
        interviews_page_MainWindow.setObjectName("interviews_page_MainWindow")
        interviews_page_MainWindow.resize(650, 650)
        interviews_page_MainWindow.setMinimumSize(QtCore.QSize(650, 650))
        interviews_page_MainWindow.setMaximumSize(QtCore.QSize(650, 711))
        self.centralwidget = QtWidgets.QWidget(parent=interviews_page_MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setMinimumSize(QtCore.QSize(625, 650))
        self.frame.setMaximumSize(QtCore.QSize(600, 650))
        self.frame.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0.489, y1:1, x2:0.494, y2:0, stop:0 rgba(71, 71, 71, 255), stop:1 rgba(255, 255, 255, 255));")
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setLineWidth(0)
        self.frame.setMidLineWidth(0)
        self.frame.setObjectName("frame")
        self.interviews_page_tableWidget = QtWidgets.QTableWidget(parent=self.frame)
        self.interviews_page_tableWidget.setGeometry(QtCore.QRect(20, 310, 591, 291))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.interviews_page_tableWidget.sizePolicy().hasHeightForWidth())
        self.interviews_page_tableWidget.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setBold(True)
        self.interviews_page_tableWidget.setFont(font)
        self.interviews_page_tableWidget.setLineWidth(0)
        self.interviews_page_tableWidget.setMidLineWidth(0)
        self.interviews_page_tableWidget.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAsNeeded)
        self.interviews_page_tableWidget.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.SizeAdjustPolicy.AdjustToContents)
        self.interviews_page_tableWidget.setAutoScroll(True)
        self.interviews_page_tableWidget.setObjectName("interviews_page_tableWidget")
        self.interviews_page_tableWidget.setColumnCount(3)
        self.interviews_page_tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.interviews_page_tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.interviews_page_tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.interviews_page_tableWidget.setHorizontalHeaderItem(2, item)
        self.interviews_page_tableWidget.horizontalHeader().setVisible(True)
        self.interviews_page_tableWidget.horizontalHeader().setCascadingSectionResizes(False)
        self.interviews_page_tableWidget.horizontalHeader().setDefaultSectionSize(193)
        self.interviews_page_tableWidget.horizontalHeader().setMinimumSectionSize(30)
        self.interviews_page_tableWidget.verticalHeader().setDefaultSectionSize(30)
        self.interviews_page_tableWidget.verticalHeader().setMinimumSectionSize(24)
        self.interviews_image_label = QtWidgets.QLabel(parent=self.frame)
        self.interviews_image_label.setGeometry(QtCore.QRect(20, 20, 551, 111))
        self.interviews_image_label.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.interviews_image_label.setText("")
        self.interviews_image_label.setPixmap(QtGui.QPixmap("images/werhere_image.png"))
        self.interviews_image_label.setScaledContents(True)
        self.interviews_image_label.setObjectName("interviews_image_label")
        self.groupBox = QtWidgets.QGroupBox(parent=self.frame)
        self.groupBox.setGeometry(QtCore.QRect(20, 160, 591, 151))
        self.groupBox.setTitle("")
        self.groupBox.setObjectName("groupBox")
        self.submitted_projects_pushButton = QtWidgets.QPushButton(parent=self.groupBox)
        self.submitted_projects_pushButton.setGeometry(QtCore.QRect(10, 90, 131, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        self.submitted_projects_pushButton.setFont(font)
        self.submitted_projects_pushButton.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.submitted_projects_pushButton.setStyleSheet("\n"
"QPushButton:hover{\n"
"   border-radius : 6px;\n"
"    color: rgb(255, 255, 255);\n"
"    background-color:  ;\n"
"    background-color: rgb(218, 30, 60);\n"
"    border: 1px solid rgb(255, 255, 255);\n"
"\n"
"}\n"
"\n"
"\n"
"")
        self.submitted_projects_pushButton.setObjectName("submitted_projects_pushButton")
        self.back_to_preferences_pushButton = QtWidgets.QPushButton(parent=self.groupBox)
        self.back_to_preferences_pushButton.setGeometry(QtCore.QRect(290, 90, 140, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        self.back_to_preferences_pushButton.setFont(font)
        self.back_to_preferences_pushButton.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.back_to_preferences_pushButton.setStyleSheet("\n"
"QPushButton:hover{\n"
"   border-radius : 6px;\n"
"    color: rgb(255, 255, 255);\n"
"    background-color:  ;\n"
"    background-color: rgb(218, 30, 60);\n"
"    border: 1px solid rgb(255, 255, 255);\n"
"\n"
"}\n"
"\n"
"\n"
"")
        self.back_to_preferences_pushButton.setObjectName("back_to_preferences_pushButton")
        self.exit_pushButton = QtWidgets.QPushButton(parent=self.groupBox)
        self.exit_pushButton.setGeometry(QtCore.QRect(450, 90, 121, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        self.exit_pushButton.setFont(font)
        self.exit_pushButton.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.exit_pushButton.setStyleSheet("\n"
"QPushButton:hover{\n"
"   border-radius : 6px;\n"
"    color: rgb(255, 255, 255);\n"
"    background-color:  ;\n"
"    background-color: rgb(218, 30, 60);\n"
"    border: 1px solid rgb(255, 255, 255);\n"
"\n"
"}\n"
"\n"
"\n"
"")
        self.exit_pushButton.setObjectName("exit_pushButton")
        self.arrived_projects_pushButton = QtWidgets.QPushButton(parent=self.groupBox)
        self.arrived_projects_pushButton.setGeometry(QtCore.QRect(150, 90, 131, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        self.arrived_projects_pushButton.setFont(font)
        self.arrived_projects_pushButton.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.arrived_projects_pushButton.setStyleSheet("\n"
"QPushButton:hover{\n"
"   border-radius : 6px;\n"
"    color: rgb(255, 255, 255);\n"
"    background-color:  ;\n"
"    background-color: rgb(218, 30, 60);\n"
"    border: 1px solid rgb(255, 255, 255);\n"
"\n"
"}\n"
"\n"
"")
        self.arrived_projects_pushButton.setObjectName("arrived_projects_pushButton")
        self.search_pushButton = QtWidgets.QPushButton(parent=self.groupBox)
        self.search_pushButton.setGeometry(QtCore.QRect(450, 30, 121, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        self.search_pushButton.setFont(font)
        self.search_pushButton.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.search_pushButton.setStyleSheet("\n"
"QPushButton:hover{\n"
"   border-radius : 6px;\n"
"    color: rgb(255, 255, 255);\n"
"    background-color:  ;\n"
"    background-color: rgb(218, 30, 60);\n"
"    border: 1px solid rgb(255, 255, 255);\n"
"\n"
"}\n"
"\n"
"")
        self.search_pushButton.setObjectName("search_pushButton")
        self.search_lineEdit = QtWidgets.QLineEdit(parent=self.groupBox)
        self.search_lineEdit.setGeometry(QtCore.QRect(10, 30, 421, 31))
        self.search_lineEdit.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.DefaultContextMenu)
        self.search_lineEdit.setAccessibleName("")
        self.search_lineEdit.setAccessibleDescription("")
        self.search_lineEdit.setAutoFillBackground(False)
        self.search_lineEdit.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-radius : 8px;")
        self.search_lineEdit.setInputMethodHints(QtCore.Qt.InputMethodHint.ImhNone)
        self.search_lineEdit.setInputMask("")
        self.search_lineEdit.setText("")
        self.search_lineEdit.setEchoMode(QtWidgets.QLineEdit.EchoMode.Normal)
        self.search_lineEdit.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.search_lineEdit.setDragEnabled(False)
        self.search_lineEdit.setReadOnly(False)
        self.search_lineEdit.setCursorMoveStyle(QtCore.Qt.CursorMoveStyle.LogicalMoveStyle)
        self.search_lineEdit.setClearButtonEnabled(False)
        self.search_lineEdit.setObjectName("search_lineEdit")
        self.label = QtWidgets.QLabel(parent=self.frame)
        self.label.setGeometry(QtCore.QRect(130, 150, 371, 21))
        self.label.setStyleSheet("background-color: qradialgradient(spread:reflect, cx:0.477, cy:0.568, radius:0.73, fx:0.46, fy:0.575, stop:0.602273 rgba(255, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));")
        self.label.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)
        interviews_page_MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(parent=interviews_page_MainWindow)
        self.statusbar.setObjectName("statusbar")
        interviews_page_MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(interviews_page_MainWindow)
        QtCore.QMetaObject.connectSlotsByName(interviews_page_MainWindow)

        self.sort_order = {}  # Dictionary to keep track of sort order for each column

        self.worksheet = connection_hub('key.json', 'Mulakatlar', 'Sayfa1')

        self.interviews = self.worksheet.get_all_values()
        # Rebuilds the list based on the data type of the cells.
        self.interviews = remake_it_with_types(self.interviews)

        write2table(self.interviews_page_tableWidget, [self.interviews[0]])  # This code updates the tableWidget headers
        self.menu_admin = None
        self.menu_user = None


        self.search_pushButton.clicked.connect(self.search_clicked)
        self.search_lineEdit.returnPressed.connect(self.search_clicked)
        self.submitted_projects_pushButton.clicked.connect(self.submitted_projects_clicked)
        self.arrived_projects_pushButton.clicked.connect(self.arrived_projects_clicked)
        self.back_to_preferences_pushButton.clicked.connect(self.back_to_preferences_clicked)
        self.exit_pushButton.clicked.connect(self.exit_clicked)

        # Connect the cellEntered signal to the on_cell_entered method
        self.interviews_page_tableWidget.cellEntered.connect(self.on_cell_entered)


        # Connect the cellEntered signal to the on_cell_entered method
        self.interviews_page_tableWidget.cellClicked.connect(self.on_cell_clicked)

        # Connect the header's sectionClicked signal to the on_header_clicked method
        self.interviews_page_tableWidget.horizontalHeader().sectionClicked.connect(self.on_header_clicked)

        # This code enables mouse tracking on tableWidget. It is needed for all mouse activity options above!
        self.interviews_page_tableWidget.setMouseTracking(True)

    def retranslateUi(self, interviews_page_MainWindow):
        _translate = QtCore.QCoreApplication.translate
        interviews_page_MainWindow.setWindowTitle(_translate("interviews_page_MainWindow", "                                                        INTERVIEWS PAGE"))
        item = self.interviews_page_tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("interviews_page_MainWindow", "Name"))
        item = self.interviews_page_tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("interviews_page_MainWindow", "Project Submission Date"))
        item = self.interviews_page_tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("interviews_page_MainWindow", "Project Arrival Date"))
        self.submitted_projects_pushButton.setText(_translate("interviews_page_MainWindow", "Submitted Projects"))
        self.back_to_preferences_pushButton.setText(_translate("interviews_page_MainWindow", "Back to Preferences"))
        self.exit_pushButton.setText(_translate("interviews_page_MainWindow", "Exit"))
        self.arrived_projects_pushButton.setText(_translate("interviews_page_MainWindow", "Arrived Projects"))
        self.search_pushButton.setText(_translate("interviews_page_MainWindow", "Search"))
        self.label.setText(_translate("interviews_page_MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-family:\'__Inter_46a1ea\',\'__Inter_Fallback_46a1ea\',\'system-ui\',\'arial\'; font-size:10pt; font-weight:600; color:#ffffff;\">CRM (İnterviews Page)</span></p></body></html>"))


    

    

    def search_clicked(self):
        searched_people = [self.interviews[0]]
        for person in self.interviews[1:]:
            # If the text in the textbox appears within one of the names in the list AND is not empty at the same time!
            if (self.search_lineEdit.text().lower() in str(person[1]).lower()
                    and self.search_lineEdit.text() != ''):
                searched_people.append(person)

        # Make empty the search area
        self.search_lineEdit.setText('')

        if len(searched_people) > 1:  # If the searched_people variable is not empty!
            pass
        else:
            no_user = ['No User Found!']
            [no_user.append('-') for i in range(len(self.interviews[0]) - 1)]
            searched_people.append(no_user)
            # searched_people.append(['No user found!', '-', '-'])
            # Above - one line - code works as same as active code. But active code is automated for cell amount
        return write2table(self.interviews_page_tableWidget, searched_people)


    
    def submitted_projects_clicked(self):
        submitted_projects = [self.interviews[0]]
        for i in self.interviews[1:]:
            if i[2]:
                submitted_projects.append(i)

        if len(submitted_projects) > 1:  # If the submitted_projects variable is not empty!
            pass
        else:
            no_user = ['There is no submitted project!']
            [no_user.append('-') for i in range(len(self.interviews[0]) - 1)]
            submitted_projects.append(no_user)
            # submitted_projects.append(['There is no submitted project!', '-', '-', '-'])
            # Above - one line - code works as same as active code. But active code is automated for cell amount
        return write2table(self.interviews_page_tableWidget, submitted_projects)

    def arrived_projects_clicked(self):
        projects_arrivals = [self.interviews[0]]
        for i in self.interviews[1:]:
            if len(i) >= 4 and i[3]:  # Listenin dördüncü öğesi varsa ve doluysa
                projects_arrivals.append(i)

        if len(projects_arrivals) > 1:  # If the submitted_projects variable is not empty!
            pass
        else:
            no_user = ['There is no arrival project!']
            [no_user.append('-') for i in range(len(self.interviews[0]) - 1)]
            projects_arrivals.append(no_user)
            # projects_arrivals.append(['There is no arrival project!', '-', '-', '-', '-'])
            # Above - one line - code works as same as active code. But active code is automated for cell amount
        return write2table(self.interviews_page_tableWidget, projects_arrivals)
    

    def back_to_preferences_clicked(self):
        from preference_menu import Ui_MainWindow
        self.MainWindow= QtWidgets.QMainWindow()
        self.ui =Ui_MainWindow()
        self.ui.setupUi(self.MainWindow) 
        self.MainWindow.show() 
        self.main_window.close()

    def exit_clicked(self):
        from PyQt6.QtWidgets import QApplication, QMainWindow, QPushButton
        QApplication.instance().quit()


    # This code is written to make the contents appear briefly when hovering over the cell.
    def on_cell_entered(self, row, column):
        # Get the text of the cell at the specified row and column
        item_text = self.interviews_page_tableWidget.item(row, column).text()

        # Show a tooltip with the cell text
        tooltip = self.interviews_page_tableWidget.viewport().mapToGlobal(
            self.interviews_page_tableWidget.visualItemRect(
                self.interviews_page_tableWidget.item(row, column)).topLeft())
        QToolTip.setFont(QFont("SansSerif", 10))
        QToolTip.showText(tooltip, item_text)

    # This code is for cell clicking
    # If you want to show a persistent tooltip with the cell text. You need to use this code.
    # I coded it for 'on_cell_clicked' method
    def on_cell_clicked(self, row, column):
        # Get the text of the clicked cell
        item_text = self.interviews_page_tableWidget.item(row, column).text()

        # Show a persistent tooltip with the cell text
        tooltip = self.interviews_page_tableWidget.viewport().mapToGlobal(
            self.interviews_page_tableWidget.visualItemRect(
                self.interviews_page_tableWidget.item(row, column)).topLeft())
        QToolTip.setFont(QFont("SansSerif", 10))
        QToolTip.showText(tooltip, item_text, self.interviews_page_tableWidget)

    # This code is for header clicking. This method sorts the data based on the column that was clicked
    def on_header_clicked(self, logical_index):
        # Get the current sort order for the clicked column
        current_order = self.sort_order.get(logical_index, None)

        # Toggle between ascending and descending order
        if current_order == Qt.SortOrder.AscendingOrder:
            new_order = Qt.SortOrder.DescendingOrder
        else:
            new_order = Qt.SortOrder.AscendingOrder

        # Update the sort order dictionary
        self.sort_order[logical_index] = new_order

        # Sort the table based on the clicked column and the new sort order
        self.interviews_page_tableWidget.sortItems(logical_index, order=new_order)



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    interviews_page_MainWindow = QtWidgets.QMainWindow()
    ui = Ui_interviews_page_MainWindow()
    ui.setupUi(interviews_page_MainWindow)
    interviews_page_MainWindow.show()
    sys.exit(app.exec())
