# Form implementation generated from reading ui file 'login_window.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

from googleapiclient.discovery import build
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
import pickle
import os
from PyQt6 import QtCore, QtGui, QtWidgets
# login_window.py dosyasının başına ekleyin

from PyQt6.QtWidgets import QMessageBox

# Hangi kapsamları (scopes) kullanacağınızı belirtin
SCOPES = ['https://www.googleapis.com/auth/spreadsheets.readonly']

def list_column_values(service, spreadsheet_id, range_name):
    """
    Belirli bir Google Sheets'deki belirli bir aralıktaki değerleri listeler.

    Args:
        service (googleapiclient.discovery.Resource): Google Sheets servis örneği
        spreadsheet_id (str): E-tablo kimliği
        range_name (str): Veri aralığı (örneğin, 'Form Yanıtları 1!A:C')

    Returns:
        dict: Sütun adlarına göre değerlerin sözlüğü
    """
    sheet = service.spreadsheets()
    result = sheet.values().get(spreadsheetId=spreadsheet_id, range=range_name).execute()
    values = result.get('values', [])

    if not values:
        return {}

    # Başlıkları al (ilk satır)
    headers = values[0]
    data = {header: [] for header in headers}

    # Verileri al (ikinci satırdan itibaren)
    for row in values[1:]:
        for i, header in enumerate(headers):
            data[header].append(row[i] if i < len(row) else None)

    return data

def authenticate():
    """
    Google Sheets API'ına kimlik doğrulama yapar.

    Returns:
        google.oauth2.credentials.Credentials: Kimlik bilgileri
    """
    creds = None
    # Önce daha önce kimlik doğrulaması yapılmış bir token al
    if os.path.exists('token.pickle'):
        with open('token.pickle', 'rb') as token:
            creds = pickle.load(token)

    # Token hala geçerli değilse veya yoksa, kullanıcıdan kimlik doğrulama iste
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(
                'credentials.json', SCOPES)
            creds = flow.run_local_server(port=0)
        # Yeni kimlik bilgilerini kaydet
        with open('token.pickle', 'wb') as token:
            pickle.dump(creds, token)

    return creds

def authenticate_user(username, password):
    """
    Veritabanındaki kullanıcı adı ve şifreyi doğrular.

    Args:
        username (str): Kullanıcı adı
        password (str): Şifre

    Returns:
        str: Kullanıcının yetkisi ("admin" veya "user") veya None
    """
    # Kimlik doğrulama işlemini gerçekleştir
    credentials = authenticate()

    if credentials is None:
        return None

    # Verileri Google Sheets'den al
    service = build('sheets', 'v4', credentials=credentials)
    spreadsheet_id = '1nyTJioGcvDyHV8ZryxdWmU3ziBe1Txs9mC0yuDhrVUg'  # "Kullanicilar" dosyasının kimliği
    range_name = 'Form Yanıtları 1!A:C'
    column_values = list_column_values(service, spreadsheet_id, range_name)

    # Kullanıcı adı ve şifreyi kontrol et
    for i in range(len(column_values['kullanici'])):
        if column_values['kullanici'][i] == username and column_values['parola'][i] == password:
            return column_values['yetki'][i]  # Kullanıcının yetkisini döndür

    return None  # Kullanıcı bulunamadı

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(500, 385)
        MainWindow.setMinimumSize(QtCore.QSize(500, 385))
        MainWindow.setMaximumSize(QtCore.QSize(500, 385))
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.frame_login_main = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame_login_main.setGeometry(QtCore.QRect(0, -30, 600, 415))
        self.frame_login_main.setMinimumSize(QtCore.QSize(600, 415))
        self.frame_login_main.setMaximumSize(QtCore.QSize(600, 415))
        self.frame_login_main.setAutoFillBackground(False)
        self.frame_login_main.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0.489, y1:1, x2:0.494, y2:0, stop:0 rgba(71, 71, 71, 255), stop:1 rgba(255, 255, 255, 255));")
        self.frame_login_main.setFrameShape(QtWidgets.QFrame.Shape.Panel)
        self.frame_login_main.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_login_main.setObjectName("frame_login_main")
        self.werhere_image_label = QtWidgets.QLabel(parent=self.frame_login_main)
        self.werhere_image_label.setGeometry(QtCore.QRect(10, 50, 471, 71))
        self.werhere_image_label.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.werhere_image_label.setText("")
        self.werhere_image_label.setPixmap(QtGui.QPixmap("images/werhere_image.png"))
        self.werhere_image_label.setScaledContents(True)
        self.werhere_image_label.setObjectName("werhere_image_label")
        self.welkomTextEdit_2 = QtWidgets.QTextEdit(parent=self.frame_login_main)
        self.welkomTextEdit_2.setGeometry(QtCore.QRect(0, 340, 501, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.welkomTextEdit_2.setFont(font)
        self.welkomTextEdit_2.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.welkomTextEdit_2.setFrameShape(QtWidgets.QFrame.Shape.NoFrame)
        self.welkomTextEdit_2.setObjectName("welkomTextEdit_2")
        self.welkomTextEdit = QtWidgets.QTextEdit(parent=self.frame_login_main)
        self.welkomTextEdit.setGeometry(QtCore.QRect(30, 30, 461, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.welkomTextEdit.setFont(font)
        self.welkomTextEdit.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.welkomTextEdit.setFrameShape(QtWidgets.QFrame.Shape.NoFrame)
        self.welkomTextEdit.setObjectName("welkomTextEdit")
        self.admin_login_groupBox = QtWidgets.QGroupBox(parent=self.frame_login_main)
        self.admin_login_groupBox.setGeometry(QtCore.QRect(60, 140, 388, 183))
        self.admin_login_groupBox.setMinimumSize(QtCore.QSize(388, 181))
        self.admin_login_groupBox.setMaximumSize(QtCore.QSize(388, 183))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(True)
        self.admin_login_groupBox.setFont(font)
        self.admin_login_groupBox.setStyleSheet("\n"
"QGroupBox{\n"
"    border-radius : 15px;\n"
"background-color: qradialgradient(spread:pad, cx:0.488409, cy:0.557, radius:0.73, fx:0.482955, fy:0.568909, stop:0 rgba(89, 87, 87, 255), stop:1 rgba(255, 255, 255, 255));\n"
"    border: 1px solid rgb(255, 255, 255);\n"
"}")
        self.admin_login_groupBox.setTitle("")
        self.admin_login_groupBox.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.admin_login_groupBox.setObjectName("admin_login_groupBox")
        self.admin_login_pushButton = QtWidgets.QPushButton(parent=self.admin_login_groupBox)
        self.admin_login_pushButton.setGeometry(QtCore.QRect(150, 140, 75, 24))
        font = QtGui.QFont()
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.admin_login_pushButton.setFont(font)
        self.admin_login_pushButton.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.admin_login_pushButton.setStyleSheet("\n"
"QPushButton:hover{\n"
"   border-radius : 6px;\n"
"    color: rgb(255, 255, 255);\n"
"    background-color:  ;\n"
"    background-color: rgb(218, 30, 60);\n"
"    border: 1px solid rgb(255, 255, 255);\n"
"\n"
"}")
        self.admin_login_pushButton.setObjectName("admin_login_pushButton")
        self.admin_password_lineEdit_4 = QtWidgets.QLineEdit(parent=self.admin_login_groupBox)
        self.admin_password_lineEdit_4.setGeometry(QtCore.QRect(160, 80, 161, 31))
        self.admin_password_lineEdit_4.setStyleSheet("\n"
"background-color: rgb(255, 255, 255);\n"
"border-radius : 10px ;")
        self.admin_password_lineEdit_4.setEchoMode(QtWidgets.QLineEdit.EchoMode.Password)
        self.admin_password_lineEdit_4.setObjectName("admin_password_lineEdit_4")
        self.admin_user_name_label = QtWidgets.QLabel(parent=self.admin_login_groupBox)
        self.admin_user_name_label.setGeometry(QtCore.QRect(50, 50, 81, 16))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        self.admin_user_name_label.setFont(font)
        self.admin_user_name_label.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.admin_user_name_label.setObjectName("admin_user_name_label")
        self.admin_password_label = QtWidgets.QLabel(parent=self.admin_login_groupBox)
        self.admin_password_label.setGeometry(QtCore.QRect(50, 90, 71, 16))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.admin_password_label.setFont(font)
        self.admin_password_label.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.admin_password_label.setObjectName("admin_password_label")
        self.admin_username_lineEdit_3 = QtWidgets.QLineEdit(parent=self.admin_login_groupBox)
        self.admin_username_lineEdit_3.setGeometry(QtCore.QRect(160, 40, 161, 31))
        self.admin_username_lineEdit_3.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-radius : 10px ;")
        self.admin_username_lineEdit_3.setObjectName("admin_username_lineEdit_3")
        self.admin_exit_pushButton = QtWidgets.QPushButton(parent=self.admin_login_groupBox)
        self.admin_exit_pushButton.setGeometry(QtCore.QRect(240, 140, 75, 24))
        font = QtGui.QFont()
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.admin_exit_pushButton.setFont(font)
        self.admin_exit_pushButton.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.admin_exit_pushButton.setStyleSheet("\n"
"QPushButton:hover{\n"
"   border-radius : 6px;\n"
"    color: rgb(255, 255, 255);\n"
"    background-color:  ;\n"
"    background-color: rgb(218, 30, 60);\n"
"    border: 1px solid rgb(255, 255, 255);\n"
"\n"
"}")
        self.admin_exit_pushButton.setObjectName("admin_exit_pushButton")
        self.label = QtWidgets.QLabel(parent=self.frame_login_main)
        self.label.setGeometry(QtCore.QRect(70, 130, 371, 21))
        self.label.setStyleSheet("background-color: qradialgradient(spread:pad, cx:0.488409, cy:0.557, radius:0.73, fx:0.482955, fy:0.568909, stop:0 rgba(89, 13, 13, 255), stop:1 rgba(255, 255, 255, 255));")
        self.label.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.label.setObjectName("label")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 500, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


# Push Buton tıklama

        self.admin_login_pushButton.clicked.connect(self.admin_login_clicked)
        self.admin_exit_pushButton.clicked.connect(self.admin_exit_clicked)
        
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.welkomTextEdit_2.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"hr { height: 1px; border-width: 0; }\n"
"li.unchecked::marker { content: \"\\2610\"; }\n"
"li.checked::marker { content: \"\\2612\"; }\n"
"</style></head><body style=\" font-family:\'Segoe UI\'; font-size:10pt; font-weight:700; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt; font-weight:400; color:#ffffff;\">copyright@WearehereAcademy-2024</span></p></body></html>"))
        self.welkomTextEdit.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"hr { height: 1px; border-width: 0; }\n"
"li.unchecked::marker { content: \"\\2610\"; }\n"
"li.checked::marker { content: \"\\2612\"; }\n"
"</style></head><body style=\" font-family:\'Segoe UI\'; font-size:10pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:14pt; font-weight:700; color:#47555a;\">Welcome to</span></p></body></html>"))
        self.admin_login_pushButton.setText(_translate("MainWindow", "Login"))
        self.admin_password_lineEdit_4.setPlaceholderText(_translate("MainWindow", "Password"))
        self.admin_user_name_label.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:11pt; font-weight:400; color:#ffffff;\">Username</span></p></body></html>"))
        self.admin_password_label.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:11pt; color:#ffffff;\">Password</span></p></body></html>"))
        self.admin_username_lineEdit_3.setPlaceholderText(_translate("MainWindow", "Username"))
        self.admin_exit_pushButton.setText(_translate("MainWindow", "Exit"))
        self.label.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-family:\'__Inter_46a1ea\',\'__Inter_Fallback_46a1ea\',\'system-ui\',\'arial\'; font-size:10pt; font-weight:600; color:#ffffff;\">CRM (Customer Relationship Management)</span></p></body></html>"))

# Butonların Fonsiyonlarının tanımlandığı yer.

      
    

    def admin_login_clicked(self):
        username = self.admin_username_lineEdit_3.text()
        password = self.admin_password_lineEdit_4.text()
        result = authenticate_user(username, password)  # credentials'i authenticate_user fonksiyonuna geçir
        
        if result == "admin":
                # Admin girişi başarılı
                QMessageBox.information(None, "Başarılı", "Admin girişi başarılı!")
                from preference_admin_menu import Ui_admin_pref_men_MainWindow
                self.MainWindow = QtWidgets.QMainWindow()
                self.ui = Ui_admin_pref_men_MainWindow()
                self.ui.setupUi(self.MainWindow) 
                self.MainWindow.show()
                MainWindow.close()
        
        elif result == "user":
                # Admin girişi başarılı
                QMessageBox.information(None, "Başarılı", "User girişi başarılı!")
                from preference_menu import Ui_MainWindow
                self.MainWindow = QtWidgets.QMainWindow()
                self.ui = Ui_MainWindow()
                self.ui.setupUi(self.MainWindow) 
                self.MainWindow.show()
                MainWindow.close()
                       
                
        else:
                # Admin girişi başarısız
                QMessageBox.warning(None, "Hata", "Kullanıcı adı veya şifre hatalı!")
                self.admin_username_lineEdit_3.clear()
                self.admin_password_lineEdit_4.clear()

        
    def admin_exit_clicked(self):
        from PyQt6.QtWidgets import QApplication, QMainWindow, QPushButton
        QApplication.instance().quit()


    
                
  
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
